set.seed(1)
svg("plot1.svg", height = 90, width = 135)
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm6, layout = "spring", groups = parties6,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list6, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 1, legend.mode = "style2")
dev.off()
vote_table5[,32]
vote_table5[,32] == -1
vote_table5[,32] == -1 %>% sum
(vote_table5[,32] == -1) %>% sum
2820/3362
create_vote_table <- function(voting_db) {
vote_table <- data.frame()
for (i in 1:length(voting_db)) {
for (j in 1:nrow(voting_db[[i]])) {
id <- member_list$SpeakerID[member_list$NameChi == voting_db[[i]][j, 28]] %>%
as.character
if (voting_db[[i]][j, 31] == "Yes") {
vote_table[i, id] <- 1
} else if (voting_db[[i]][j, 31] == "No") {
vote_table[i, id] <- 2
} else {
vote_table[i, id] <- -1
}
}
}
vote_table[is.na(vote_table)] <- -1
low_votes <- apply(vote_table, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .5)
vote_table <- vote_table[, !low_votes]
return(vote_table)
}
vote_table5 <- create_vote_table(voting_db5)
## Draw network graph
# 5th term
corm5 <- cor(vote_table5)
parties5 <- sapply(colnames(corm5), function(x)
legco_member_affiliation[["4"]] %$% AffiliationEng[SpeakerID == x])
colnames(corm5)
parties5[is.na(parties5)] <- "Independent"
name_list5 <- sapply(colnames(corm5), function(x)
legco_member_affiliation[["4"]] %$% NameEng[SpeakerID == x])
## Plot network graph
set.seed(1)
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 1, legend.mode = "style2")
dev.off()
create_vote_table <- function(voting_db) {
vote_table <- data.frame()
for (i in 1:length(voting_db)) {
for (j in 1:nrow(voting_db[[i]])) {
id <- member_list$SpeakerID[member_list$NameChi == voting_db[[i]][j, 28]] %>%
as.character
if (voting_db[[i]][j, 31] == "Yes") {
vote_table[i, id] <- 1
} else if (voting_db[[i]][j, 31] == "No") {
vote_table[i, id] <- 2
} else {
vote_table[i, id] <- -1
}
}
}
return(vote_table)
}
vote_table5 <- create_vote_table(voting_db5)
vote_table5[is.na(vote_table5)] <- -1
low_votes <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .5)
vote_table5[, !low_votes] %>% colanmes
vote_table5[, !low_votes] %>% colnames
View(member_list)
low_votes_member <- vote_table5[, !low_votes] %>% colnames
sapply(low_votes_member, function(x)
legco_member_affiliation[["4"]] %$% NameEng[SpeakerID == x])
sapply(low_votes_member, function(x)
legco_member_affiliation[["4"]] %$% NameEng[SpeakerID == x]) %>% unname
low_votes_member
View(voting_db5)
create_vote_table <- function(voting_db) {
vote_table <- data.frame()
for (i in 1:length(voting_db)) {
for (j in 1:nrow(voting_db[[i]])) {
id <- member_list$SpeakerID[member_list$NameChi == voting_db[[i]][j, 28]] %>%
as.character
if (voting_db[[i]][j, 31] == "Yes") {
vote_table[i, id] <- 1
} else if (voting_db[[i]][j, 31] == "No") {
vote_table[i, id] <- 2
} else {
vote_table[i, id] <- -1
}
}
}
return(vote_table)
}
vote_table5 <- create_vote_table(voting_db5)
View(vote_table6)
View(vote_table5)
vote_table[is.na(vote_table)]
vote_table5[is.na(vote_table5)]
vote_table5[is.na(vote_table5)] <- -1
vote_table5[is.na(vote_table5)]
apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .5)
View(member_list)
vote_table5["87"]
sum(vote_table5["87"] == -1)
sum(vote_table5["87"] == -1)/3362
vote_table5[, !low_votes5][""87]
vote_table5[, !low_votes5]["87"]
low_votes <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .5)
vote_table5[, !low_votes5]["87"]
vote_table5[, !low_votes]["87"]
vote_table5[, !low_votes]["87"]
member_list$SpeakerID[member_list$NameChi == voting_db[[i]][1, 28]]
member_list$SpeakerID[member_list$NameChi == voting_db5[[1]][1, 28]]
member_list$SpeakerID[member_list$NameChi == voting_db5[[1]][, 28]]
member_list$SpeakerID[member_list$NameChi == voting_db5[[1]][, 28]]
member_list$SpeakerID[member_list$NameChi%in% voting_db5[[1]][1, 28]]
member_list$SpeakerID[member_list$NameChi %in% voting_db5[[1]][1, 28]]
member_list$SpeakerID[member_list$NameChi %in% voting_db5[[1]][, 28]]
member_list$NameChi[member_list$NameChi %in% voting_db5[[1]][, 28]]
apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .5)
apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > (length(x) * .5))
a <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > (length(x) * .5))
b <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .5)
a == b
nrow(vote_table5)
apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) {print(length(x));sum(x == -1) > length(x) * .5})
View(vote_table5)
vote_table5[is.na(vote_table5)] <- -1
low_votes <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .5)
low_votes_member <- sapp
low_votes_member <- sapply(low_votes, function(x) member_list$NameChi[member_list$SpeakerID == colnames(vote_table5[,low_votes])])
warnings()
low_votes_member <- member_list$NameChi[member_list$SpeakerID == colnames(vote_table5[,low_votes])]
low_votes_member <- member_list$NameChi[member_list$SpeakerID %in% colnames(vote_table5[,low_votes])]
low_votes_member <-
low_votes_member
colnames(vote_table5[,low_votes])
low_votes_percent <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) length(x) * .5)
low_votes_percent
low_votes_percent <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) (length(x) * .5))
low_votes_percent
low_votes_percent <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) (sum(x == -1) / length(x)))
low_votes_percent
sum(vote_table5[,"92"] == -1) > length(vote_table5[,"92"]) * .5
sum(vote_table5[,"92"] == -1)
length(vote_table5[,"92"]) * .5
sum(vote_table5[,"92"] == -1)
low_votes_percent <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) (sum(x != -1) / length(x)))
low_votes_percent
voting_db5[[1]][1]
voting_db5[[1]][1,3]
voting_db5[[1]]
create_vote_table <- function(voting_db) {
vote_table <- data.frame()
for (i in 1:length(voting_db)) {
for (j in 1:nrow(voting_db[[i]])) {
id <- member_list$SpeakerID[member_list$NameChi == voting_db[[i]][j, 28]] %>%
as.character
if (voting_db[[i]][j, 31] == "Yes") {
vote_table[i, id] <- 1
} else if (voting_db[[i]][j, 31] == "No") {
vote_table[i, id] <- 2
} else if (voting_db[[i]][j, 31] == "Abstain") {
vote_table[i, id] <- 3
} else {
vote_table[i, id] <- -1
}
}
}
return(vote_table)
}
vote_table5 <- create_vote_table(voting_db5)
low_votes_percent <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) (sum(x == 3) / length(x)))
low_votes_percent <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) table(x))
View(low_votes_percent)
voting_db5
create_vote_table <- function(voting_db) {
vote_table <- data.frame()
for (i in 1:length(voting_db)) {
for (j in 1:nrow(voting_db[[i]])) {
id <- member_list$SpeakerID[member_list$NameChi == voting_db[[i]][j, 28]] %>%
as.character
if (voting_db[[i]][j, 31] == "Yes") {
vote_table[i, id] <- 1
} else if (voting_db[[i]][j, 31] == "No") {
vote_table[i, id] <- 2
} else {
vote_table[i, id] <- -1
}
}
}
vote_table5[is.na(vote_table5)] <- -1
low_votes <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .5)
vote_table <- vote_table[, !low_votes]
return(vote_table)
}
vote_table5 <- create_vote_table(voting_db5)
vote_table6 <- create_vote_table(voting_db6)
## Draw network graph
# 5th term
corm5 <- cor(vote_table5)
parties5 <- sapply(colnames(corm5), function(x)
legco_member_affiliation[["4"]] %$% AffiliationEng[SpeakerID == x])
parties5[is.na(parties5)] <- "Independent"
name_list5 <- sapply(colnames(corm5), function(x)
legco_member_affiliation[["4"]] %$% NameEng[SpeakerID == x])
## Plot network graph
set.seed(1)
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 1, legend.mode = "style2")
dev.off()
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.8, legend.mode = "style2")
dev.off()
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.8, legend.mode = "style2")
dev.off()
create_vote_table <- function(voting_db) {
vote_table <- data.frame()
for (i in 1:length(voting_db)) {
for (j in 1:nrow(voting_db[[i]])) {
id <- member_list$SpeakerID[member_list$NameChi == voting_db[[i]][j, 28]] %>%
as.character
if (voting_db[[i]][j, 31] == "Yes") {
vote_table[i, id] <- 1
} else if (voting_db[[i]][j, 31] == "No") {
vote_table[i, id] <- 2
} else {
vote_table[i, id] <- -1
}
}
}
vote_table5[is.na(vote_table5)] <- -1
low_votes <- apply(vote_table5, 2, # Identify members with voting rate below 50%
function(x) sum(x == -1) > length(x) * .8)
vote_table <- vote_table[, !low_votes]
return(vote_table)
}
vote_table5 <- create_vote_table(voting_db5)
vote_table6 <- create_vote_table(voting_db6)
## Draw network graph
# 5th term
corm5 <- cor(vote_table5)
parties5 <- sapply(colnames(corm5), function(x)
legco_member_affiliation[["4"]] %$% AffiliationEng[SpeakerID == x])
parties5[is.na(parties5)] <- "Independent"
name_list5 <- sapply(colnames(corm5), function(x)
legco_member_affiliation[["4"]] %$% NameEng[SpeakerID == x])
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.8, legend.mode = "style2")
dev.off()
colnames(corm5)
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 1, legend.mode = "style2")
dev.off()
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 1, legend.mode = "style2")
dev.off()
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 1, legend.mode = "style2")
dev.off()
create_vote_table <- function(voting_db) {
vote_table <- data.frame()
for (i in 1:length(voting_db)) {
for (j in 1:nrow(voting_db[[i]])) {
id <- member_list$SpeakerID[member_list$NameChi == voting_db[[i]][j, 28]] %>%
as.character
if (voting_db[[i]][j, 31] == "Yes") {
vote_table[i, id] <- 1
} else if (voting_db[[i]][j, 31] == "No") {
vote_table[i, id] <- 2
} else {
vote_table[i, id] <- -1
}
}
}
vote_table[is.na(vote_table)] <- -1
low_votes <- apply(vote_table, 2, # Identify members with voting rate below 20%
function(x) sum(x == -1) > length(x) * .8)
vote_table <- vote_table[, !low_votes]
return(vote_table)
}
vote_table5 <- create_vote_table(voting_db5)
vote_table6 <- create_vote_table(voting_db6)
## Draw network graph
# 5th term
corm5 <- cor(vote_table5)
parties5 <- sapply(colnames(corm5), function(x)
legco_member_affiliation[["4"]] %$% AffiliationEng[SpeakerID == x])
parties5[is.na(parties5)] <- "Independent"
name_list5 <- sapply(colnames(corm5), function(x)
legco_member_affiliation[["4"]] %$% NameEng[SpeakerID == x])
## Plot network graph
set.seed(1)
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 1, legend.mode = "style2")
dev.off()
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2, legend.mode = "style2")
dev.off()
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.5, legend.mode = "style2")
dev.off()
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
dev.off()
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
## Plot network graph
set.seed(2)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
## Plot network graph
set.seed(3)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
qgraph(corm5, layout = "spring", groups = parties5, repulsion = .9,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
qgraph(corm5, layout = "spring", groups = parties5, repulsion = .8,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
qgraph(corm5, layout = "spring", groups = parties5, repulsion = .5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
pdf("plot1.pdf", height = 90, width = 135)
qgraph(corm5, layout = "spring", groups = parties5,
vsize = 1, esize = .5, labels = TRUE, label.cex = 2,
nodeNames = name_list5, border.width = .5, #color = colours,
legend = TRUE, legend.cex = 2.9, legend.mode = "style2")
dev.off()
?SnowballC
library(SnowballC)
## Fetch and build NRC sentiment dataframe for analysis
nrc_term <- get_sentiments("nrc")
nrc_term
library(tidytext)
## Fetch and build NRC sentiment dataframe for analysis
nrc_term <- get_sentiments("nrc")
library(tmcn)
toTrad(stopwordsCN())
## English
sentiment_term_en <- get_sentiments("bing")
sentiment_term_en$word %<>% wordStem(., "english")
library(magrittr)
sentiment_term_en$word %<>% wordStem(., "english")
sentiment_term_en$word %<>% wordStem(., "english") %>%
.[!duplicated(.$word), ]
sentiment_term_en$word %<>% wordStem(., "english") %>%
.[!duplicated(word), ]
sentiment_term_en$word %<>% wordStem(., "english") %>%
.[!duplicated(.), ]
sentiment_term_en$word %<>% wordStem(., "english") %>%
.[!duplicated(.)]
## English
sentiment_term_en <- get_sentiments("bing")
sentiment_term_en$word %<>% wordStem(., "english") %>%
sentiment_term_en %<>% .[!duplicated(word), ]
## English
sentiment_term_en <- get_sentiments("bing")
sentiment_term_en$word %<>% wordStem(., "english") %>%
sentiment_term_en %<>% .[!duplicated(word), ]
sentiment_term_en$word %<>% wordStem(., "english") %>%
sentiment_term_en %<>% .[!duplicated(word), ]
install.packages(c("callr", "clipr", "coda", "cowplot", "crul", "curl", "devtools", "digest", "dplyr", "ellipsis", "fpc", "git2r", "haven", "hms", "mclust", "openssl", "pillar", "processx", "quanteda", "raster", "Rcpp", "RcppArmadillo", "rematch2", "reticulate", "rmarkdown", "rsconnect", "sf", "spacyr", "stopwords", "testthat", "tmaptools", "usethis", "vctrs", "zip"))
install.packages("boot", lib="/usr/local/Cellar/r/3.6.1/lib/R/library")
View(sentiment_term_en)
sentiment_term_en$word
sentiment_term_en$word %<>% wordStem(., "english")
devtools::install_github("elgarteo/legco")
install.packages(c("curl", "DT", "feather", "knitr", "pkgdown", "sf", "tinytex"))
library(legco)
library(legcoplus)
?legcoplus
x <- legcoplus::legco_member_voting_record()
?legco_member_voting_record
x <- legcoplus::legco_member_voting_record(id=45)
x <- legcoplus::legco_member_voting_record(speaker_id=45)
x <- legcoplus::legco_member_voting_record(speaker_id=92)
View(x)
x <- legcoplus::legco_member_voting_record(speaker_id=94)
View(x)
# Before upgrade
tmp <- installed.packages()
installedpkgs <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
save(installedpkgs, file="installed_old.rda")
# After upgrade
tmp <- installed.packages()
installedpkgs.new <- as.vector(tmp[is.na(tmp[,"Priority"]), 1])
missing <- setdiff(installedpkgs, installedpkgs.new)
install.packages("tm")
require(tm)
test <- function()
{}
typeof(test)
mean(1:10)
args <- list(1:10, na.rm = T)
args
do.call(args)
do.call(mean,args)
match.fun("mean")
typeof(mean)
function(x) 3()
(function(x) 3)()
typeof(function(x) 3)
is.function(x)
is.function(test)
is.function(args)
objs <- mget(ls("package:base", all = TRUE), inherits = TRUE)
funs <- Filter(is.function, objs)
objs
quit
typeof(quit)
body(quit)
typeof(.Internal)
funs
test
c <- 10
c(c = c)
f <- function(x) {
f <- function(x) {
f <- function() {
x ^ 2
}
f() + 1
}
f(x) * 2
}
f(10)
library(rtweet)
create_tokens()
get_token()
?plot
plot(1:10, col = "red", pch = 20, xlab = "x", col.lab = "blue")
plot.default
plot(1:10, col = "red")
?install.packages
setwd("package_install_tutorial")
?install.packages
knitr::opts_chunk$set(echo = TRUE)
require("ssssss")
require("rtweet")
detach(package::rtweet)
detach(package:rtweet)
require("rtweet")
